(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c267e"],{"49be":function(e,n){e.exports="# Communicate with Server\n\nAnt Design Pro is a SPA based on the Vue technology stack. We provide a set of front-end code and local simulation data development model. Work in the form of an API with the server application of any technology stack. The basics of interacting with the server are briefly described below.\n\n## Request Process\n\nIn Ant Design Pro, a complete front-end UI interaction to the server-side processing flow looks like this:\n\n1. UI component interaction;\n2. Call the unified management service request function;\n3. Send the request using the encapsulated request.js;\n4. Get the server response;\n5. Update the data.\n\n\nAs can be seen from the above process, in order to facilitate management and maintenance, unified request processing is placed in the `@/src/api` folder, and the files are generally split according to the model dimension, such as:\n\n```\napi/\n  user.js\n  permission.js\n  goods.js\n  ...\n```\n\n\nAmong them, `@/src/utils/request.js` is based on [axios](https://github.com/axios/axios), which is convenient for handling POST, GET and other parameters, headers, and error messages. See [request.js](https://github.com/vueComponent/ant-design-vue-pro/blob/master/src/utils/request.js) for details.\n\nFor example, an example of requesting user information in api:\n```js\n// api/user.js\nimport { axios } from '@/utils/request'\n\nconst api = {\n    info: '/user',\n    list: '/users'\n}\n\n// get User by id\nexport function getUser (id) {\n    return axios({\n        url: `${api.user}/${id}`,\n        method: 'get'\n    })\n}\n\n// add User\nexport function addUser (parameter) {\n    return axios({\n        url: api.user,\n        method: 'post',\n        data: parameter\n    })\n}\n\n// update User // or (id, parameter)\nexport function updateUser (parameter) {\n    return axios({\n        url: `${api.user}/${parameter.id}`, // or `${api.user}/${id}`\n        method: 'put',\n        data: parameter\n    })\n}\n\n// delete User\nexport function deleteUser (id) {\n    return axios({\n        url: `${api.user}/${id}`,\n        method: 'delete',\n        data: parameter\n    })\n}\n\n// get User list parameter: { pageSize: 10, pageNo: 1 }\nexport function getUsers (parameter) {\n    return axios({\n        url: api.list,\n        method: 'get',\n        params: parameter\n    })\n}\n```\n\n```vue\n<template>\n\t<div>\n\t\t<a-button @click=\"queryUser\"></a-button>\n\t\t\n\t\t<a-table :dataSource=\"list\">\n\t\t</a-table>\n\t</div>\n</template>\n\n<script>\nimport { getUser, getUsers } from '@/api/user'\n\nexport default {\n    data () {\n        return {\n        \tid: 0,\n        \tqueryParam: {\n                pageSize: 10,\n                pageNo: 1,\n                username: ''\n        \t},\n        \tinfo: {},\n            list: []\n        }\n    },\n    methods: {\n        queryUser () {\n        \tconst { $message } = this\n            getUser(this.id).then(res => {\n                this.info = res.data\n            }).catch(err => {\n                $message.error(`load user err: ${err.message}`)\n            })\n        },\n        queryUsers () {\n            getUsers(this.queryParam).then(res => {\n                this.list = res\n            })\n        }\n    }\n}\n<\/script>\n```\n\n## Mock API\n\n- `mockjs2` does not take effect in `production` by default, so if you compile it directly without any modification, you cannot see the effect.\n- You can check the source code of this file and find code like `import'./mock'`. (Remove it to completely remove the mock interception in the project)\n- If you want to use mock in `production` environment like preview, you need to modify the environment judgment in `src/mock/index.js`\n"}}]);