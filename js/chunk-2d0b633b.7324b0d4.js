(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b633b"],{"1bc7":function(n,e){n.exports="# Import Module\n\nIn addition to the `ant-design-vue` components and the built-in business components of the scaffold, sometimes we need to introduce other external modules. Here we introduce the rich text component [vue-quill-editor](https://www.npmjs.com/package/vue-quill-editor) as an example.\n\n---\n\n## Introduce Dependencies\n\nEnter the following command at the terminal to complete the installation:\n\n```bash\n$ yarn add vue-quill-editor\nor\n$ npm install vue-quill-editor --save\n```\n> Adding the `--save` parameter automatically adds dependencies to package.json.\n\n## Use\n\n### Global import (main.js)\n\n```js\nimport Vue from 'vue'\nimport VueQuillEditor from 'vue-quill-editor'\n\n// require styles\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\n\nVue.use(VueQuillEditor, /* { default global options } */)\n```\n\n\n\n### On-demand import\n\n```vue\n<template>\n\t<div>\n        <quill-editor ref=\"myTextEditor\"\n                      v-model=\"content\"\n                      :config=\"editorOption\"\n                      @blur=\"onEditorBlur($event)\"\n                      @focus=\"onEditorFocus($event)\"\n                      @ready=\"onEditorReady($event)\">\n        </quill-editor>\n\t</div>\n</template>\n\n<script>\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\nimport { quillEditor } from 'vue-quill-editor'\n\nexport default {\n  components: {\n    quillEditor\n  },\n  data () {\n      return {\n          content: '<h2>I am Example</h2>',\n          editorOption: {\n           // something config\n          }\n      }\n  },\n  methods: {\n    onEditorBlur(editor) {\n      console.log('editor blur!', editor)\n    },\n    onEditorFocus(editor) {\n      console.log('editor focus!', editor)\n    },\n    onEditorReady(editor) {\n      console.log('editor ready!', editor)\n    },\n    onEditorChange({ editor, html, text }) {\n      // console.log('editor change!', editor, html, text)\n      this.content = html\n    }\n  },\n  computed: {\n    editor() {\n      return this.$refs.myTextEditor.quillEditor\n    }\n  },\n  mounted() {\n    // you can use current editor object to do something(editor methods)\n    console.log('this is my editor', this.editor)\n    // this.editor to do something...\n  }\n}\n<\/script>\n```\n\n\nThis successfully introduced a rich text component. There are several points worth noting:\n\n- import requires attention to the data structure exposed by the component;\n- Some components require additional styles, such as this one.\n\n"}}]);