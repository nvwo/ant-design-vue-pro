(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0aa5f3"],{1174:function(n,t){n.exports="# 错误处理\n\n在用户使用过程中，可能遇到各种异常情况，比如页面404，申请结果失败，请求的返回异常等等，这篇文档会按照报错形式的不同，分别介绍下相应的处理建议。\n\n## 页面级报错\n\n### 应用场景\n\n- 路由直接引导到报错页面，比如你输入的网址没有匹配到任何页面，可以由路由引导到预设的 404 页面。\n- 代码控制跳转到报错页面，比如根据请求返回的数据，将没有权限的用户引导到 403 页面。\n\n### 实现\n\n针对页面级的报错，我们提供了两个业务组件供你选择，可以很方便地实现一个报错页面：\n\n- [Exception 异常页](https://preview.pro.loacg.com/exception/404)\n\n```vue\n<template>\n\t<exception-page type=\"404\" />\n<template>\n\n<script>\nimport ExceptionPage from '@/views/exception/ExceptionPage'\n\nexport default {\n  components: {\n    ExceptionPage\n  }\n}\n<\/script>\n```\n\n默认支持 404，403，500 三种错误，也可自定义文案等内容。\n\n- [Result 结果页](https://preview.pro.loacg.com/result/fail)\n\n```vue\n<template>\n\t<result \n\t\t:is-success=\"false\"\n\t\ttitle=\"提交失败\"\n\t\tdescription=\"请核对并修改以下信息后，再重新提交。\"\n\t>\n\t\t<template slot=\"action\">\n\t\t\t<a-buttion size=\"large\" type=\"primary\">返回修改</a-buttion>\n\t\t\t<a-buttion size=\"large\" type=\"default\">取消</a-buttion>\n\t\t</template>\n\t</result>\n</template>\n\n<script>\nimport { Result } from '@/components'\n\nexport default {\n  components: {\n    Result\n  }\n}\n<\/script>\n```\n\n这个组件一般用在提交结果展示，文案操作等均可自定义。\n\n\n### 应用场景\n\n- 表单项校验报错。\n- 操作反馈。\n- 网络请求错误。\n\n### 实现\n\n关于表单项报错，请参考 [antd vue Form](https://vue.ant.design/components/form-cn/) 中的实现。对于操作反馈和网络请求错误提示，有一些组件可能会用到：\n\n- [Alert](https://vue.ant.design/components/alert-cn/)\n- [message](https://vue.ant.design/components/message-cn/)\n- [notification](https://vue.ant.design/components/notification-cn/)\n\n在单页应用中，最常见的需求就是处理网络错误信息，我们可以利用 message 和 notification 来吐出响应的接口/网络/业务数据错误。\n\n![](/assets/error-handle1.png)\n\n`Ant Design Pro` 封装了一个强大的 [request.js](https://github.com/sendya/ant-design-pro-vue/blob/master/src/utils/request.js) 统一处理请求，提供了默认的错误处理以及提示。\n\n```js\nconst err = (error) => {\n  if (error.response) {\n    const data = error.response.data\n    const token = Vue.ls.get(ACCESS_TOKEN)\n    if (error.response.status === 403) {\n      notification.error({ message: 'Forbidden', description: data.message })\n    }\n    if (error.response.status === 401) {\n      notification.error({ message: 'Unauthorized', description: 'Authorization verification failed' })\n      if (token) {\n        store.dispatch('Logout').then(() => {\n          setTimeout(() => {\n            window.location.reload()\n          }, 1500)\n        })\n      }\n    }\n  }\n  return Promise.reject(error)\n}\n```\n\n为了方便展示 404 等页面，我们在 `request.js` 中封装了根据状态跳转到相应页面的逻辑,建议在线上环境中删除这个逻辑，代码如下：\n\n```js\nif (error.response.status === 401) {\n    notification.error({ message: 'Unauthorized', description: 'Authorization verification failed' })\n    if (token) {\n    \tstore.dispatch('Logout').then(() => {\n            setTimeout(() => {\n            \twindow.location.reload()\n            }, 1500)\n        })\n    }\n}\n```\n\n完整代码可参考：https://github.com/sendya/ant-design-pro-vue/blob/master/src/utils/request.js"}}]);