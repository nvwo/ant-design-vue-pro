(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21e3b5"],{d54b:function(n,t){n.exports="# 布局\n\n页面整体布局是一个产品最外层的框架结构，往往会包含导航、页脚、侧边栏、通知栏以及内容等。在页面之中，也有很多区块的布局结构。在真实项目中，页面布局通常统领整个应用的界面，有非常重要的作用。\n\n## Ant Design Pro 的布局\n\n\n\n在 Ant Design Pro 中，我们抽离了使用过程中的通用布局，都放在 `/layouts` 目录中，分别为：\n\n- BasicLayout：基础页面布局，包含了头部导航，侧边栏和通知栏：\n\n![BasicLayout](/assets/basic_layout.jpg)  \n\n- UserLayout：抽离出用于登陆注册页面的通用布局\n\n![UserLayout](/assets/user_layout.jpg)  \n\n- PageView：基础布局，包含了面包屑，和中间内容区 (`slot`)\n- RouterView：空布局，专门为了二级菜单内容区自定义\n- BlankLayout：空白的布局\n\n\n ### 如何使用 Ant Design Pro 布局\n\n通常布局是和路由系统紧密结合的，Ant Design Pro 的路由使用了 `Vue-Router` 的路由方案，为了统一方便的管理路由和页面的关系，我们将配置信息统一抽离到 `config/router.config.js` 下，通过如下配置定义每个页面的布局：\n\n```js\n// eslint-disable-next-line\nimport { UserLayout, BasicLayout, RouteView, BlankLayout, PageView } from '@/components/layouts'\n\nexport default [\n  {\n    path: '/',\n    name: 'index',\n    component: BasicLayout,\n    meta: { title: '首页' },\n    redirect: '/dashboard/workplace',\n    children: [\n      // dashboard\n      {\n        path: '/dashboard',\n        name: 'dashboard',\n        redirect: '/dashboard/workplace',\n        component: RouteView,\n        meta: { title: '仪表盘', icon: 'dash', permission: ['admin'] },\n        children: [\n          {\n          \tpath: '',\n          \tname: '',\n          \tcomponent: () => import('@/views/...'),\n          \tmeta: { title: '', permission: [ '...' ] }\n          },\n          {\n          \tpath: '',\n          \tname: '',\n          \thidden: true,\n          \tcomponent: () => import('@/views/...'),\n          \tmeta: { title: '', keepAlive: true, permission: [ '...' ] }\n          }\n        ]\n      },\n      // forms\n      {\n        path: '/form',\n        redirect: '/form/base-form',\n        component: PageView,\n        meta: { title: '表单页', icon: 'form', permission: [ 'form' ] },\n        children: [\n          {\n            path: '/form/base-form',\n            name: 'BaseForm',\n            component: () => import('@/views/form/BasicForm'),\n            meta: { title: '基础表单', permission: [ 'form' ] }\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n映射路由和页面布局（组件）的关系如代码所示，完整映射转换实现可以参看 [router.config.js](https://github.com/sendya/ant-design-pro-vue/blob/master/src/config/router.config.js)。\n\n\n更多 Vue-Router 的路由配置方式可以参考：[Vue-Router  配置式路由](https://router.vuejs.org/)。\n\n\n\n#### Pro 扩展配置\n\n我们在 `router.config.js` 扩展了一些关于 pro 全局菜单的配置。\n\n```\n{\n\thidden: true,\n    hideChildrenInMenu: true,\n    meta: {\n        icon: 'dashboard',\n        title: '菜单标题',\n        keepAlive: true,\n        permission: ['admin']\n    }\n}\n```\n> 更多可配置属性，请参考 [路由和菜单](/docs/router-and-nav)\n\n## Ant Design 布局组件\n\n除了 Pro 里的内建布局以外，在一些页面中需要进行布局，可以使用 Ant Design 目前提供的两套布局组件工具：[Layout](https://vue.ant.design/components/layout-cn/) 和 [Grid](https://vue.ant.design/components/grid-cn/)。\n\n### Grid 组件\n\n栅格布局是网页中最常用的布局，其特点就是按照一定比例划分页面，能够随着屏幕的变化依旧保持比例，从而具有弹性布局的特点。\n\n而 Ant Design 的栅格组件提供的功能更为强大，能够设置间距、具有支持响应式的比例设置，以及支持 `flex` 模式，基本上涵盖了大部分的布局场景，详情参看：[Grid](https://vue.ant.design/components/grid-cn/)。\n\n### Layout 组件\n\n如果你需要辅助页面框架级别的布局设计，那么 [Layout](https://vue.ant.design/components/layout-cn/) 则是你最佳的选择，它抽象了大部分框架布局结构，使得只需要填空就可以开发规范专业的页面整体布局，详情参看：[Layout](https://vue.ant.design/components/layout-cn/)。\n\n### 根据不同场景区分抽离布局组件\n\n在大部分场景下，我们需要基于上面两个组件封装一些适用于当下具体业务的组件，包含了通用的导航、侧边栏、顶部通知、页面标题等元素。例如 Ant Design Pro 的 [BasicLayout](https://github.com/sendya/ant-design-pro-vue/blob/master/src/components/layouts/BasicLayout.vue)。\n\n通常，我们会把抽象出来的布局组件，放到跟  `components`  和  `layouts` 文件夹中方便管理。需要注意的是，这些布局组件和我们平时使用的其它组件并没有什么不同，只不过功能性上是为了处理布局问题。\n"}}]);