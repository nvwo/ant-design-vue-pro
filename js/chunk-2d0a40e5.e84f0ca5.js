(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0a40e5"],{"058b":function(n,e){n.exports="# 国际化\n\n### 开始使用\n\npro 通过 [vue-i18n](https://kazupon.github.io/vue-i18n/) 插件来实现全球化的功能。 在 [@/locales/index.js](https://github.com/vueComponent/ant-design-vue-pro/blob/master/src/locales/index.js)  中引入相应的插件，以及对应的语言js，例如 en-US.js 和 zh-CN.js，例如：\n\n```js\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\nimport enUS from './locale/en-US'\n\nVue.use(VueI18n)\n\nconst i18n = new VueI18n({\n  locale: 'zh-CN', // 语言标识\n  fallbackLocale: defaultLanguage,\n  messages:{\n    enUS\n  }\n})\nexport default i18n\n......\n```\n\n本项目内置了一套默认的 i18n 实现，可直接参考: [locales实现代码](https://github.com/vueComponent/ant-design-vue-pro/tree/master/src/locales)。\n\n### 格式化字符串\n\n如果我们在 `en-US.js` 和 `zh-CN.js` 中分别作了如下配置：\n\n```js\n// zh-CN.js\nimport zhCN from 'ant-design-vue/es/locale-provider/zh_CN'\n\nexport default {\n  // 额外加载 ant-design-vue 的全局本地化语言\n  // 用于在根级的本地化组件绑定当前本地化文件\n  antLocale: zhCN,\n  lang: '中文',\n}\n\n// en-US.js\nimport enUS from 'ant-design-vue/es/locale-provider/en_US'\n\nexport default {\n  antLocale: enUS,\n  lang: 'English',\n}\n```\n\n我们就可以在组件中这样使用\n\n```js\n<template>\n    <div>\n    \t{{ $t('lang') }} \n    </div>\n</template>\n```\n\n### 设置区域\n\n在 `src/locales/index.js`  暴露了名为 `loadLanguageAsync`  的函数，通过这函数可以方便的切换区域。 \n\n```js\nimport { loadLanguageAsync } from '@/locales' //’@‘为别名，可能有差异，以实际配置为准 \n...\n// 此处代码 copy 自 i18n 分支，\n SetLang({ commit }, lang) {\n      return new Promise(resolve => {\n        commit('SET_LANG', lang)  // 因为lang分支，采用vuex和localstorege存储当前语言标识，若没有用到，此处可不写\n        loadLanguageAsync(lang)\n        resolve()\n      })\n    }\n...\n```\n\n// App.vue\n```vue\n<template>\n  \x3c!-- :locale 绑定 ant design 本地化 --\x3e\n  <a-locale-provider :locale=\"locale\">\n    <div id=\"app\">\n      <router-view/>\n    </div>\n  </a-locale-provider>\n</template>\n\n<script>\nimport { AppDeviceEnquire } from '@/utils/mixin'\nimport i18n from '@/locales'\nimport i18nMixin from '@/store/i18n-mixin'\n\nexport default {\n  mixins: [AppDeviceEnquire, i18nMixin],\n  data () {\n    return {\n      locale: {}\n    }\n  },\n  created () {\n    this.$watch('currentLang', () => {\n      this.locale = i18n.getLocaleMessage(this.currentLang).antLocale\n    })\n  },\n  mounted () {\n  }\n}\n<\/script>\n<style>\n  #app {\n    height: 100%;\n  }\n</style>\n```\n> 也可以参考默认实现代码 [@/App.vue](https://github.com/vueComponent/ant-design-vue-pro/blob/master/src/App.vue)\n\n\n## 注意\n> 本案例仅作参考，实际使用请自行根据 vue-i18n 官方文档进行\n\n更多用法可以参考 [vue-i18n](https://kazupon.github.io/vue-i18n/)\n"}}]);