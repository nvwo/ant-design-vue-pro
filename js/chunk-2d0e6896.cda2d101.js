(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e6896"],{"98bc":function(n,o){n.exports="# 引入外部模块\n\n除了 `ant-design-vue` 组件以及脚手架内置的业务组件，有时我们还需要引入其他外部模块，这里以引入富文本组件 [vue-quill-editor](https://www.npmjs.com/package/vue-quill-editor) 为例进行介绍，如果该组件已更新引入方式，可直接自行前往组件首页查看如何引入，并以官方为准。\n\n---\n\n## 引入依赖\n\n在终端输入下面的命令完成安装：\n\n```bash\n$ yarn add vue-quill-editor\nor\n$ npm install vue-quill-editor --save\n```\n> 加上 `--save` 参数会自动添加依赖到 package.json 中去。\n\n## 使用\n\n### 全局引入\n\n```js\nimport Vue from 'vue'\nimport VueQuillEditor from 'vue-quill-editor'\n\n// require styles\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\n\nVue.use(VueQuillEditor, /* { default global options } */)\n```\n\n\n\n### 局部按需引入\n\n```vue\n<template>\n\t<div>\n        <quill-editor ref=\"myTextEditor\"\n                      v-model=\"content\"\n                      :config=\"editorOption\"\n                      @blur=\"onEditorBlur($event)\"\n                      @focus=\"onEditorFocus($event)\"\n                      @ready=\"onEditorReady($event)\">\n        </quill-editor>\n\t</div>\n</template>\n\n<script>\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\nimport { quillEditor } from 'vue-quill-editor'\n\nexport default {\n  components: {\n    quillEditor\n  },\n  data () {\n      return {\n          content: '<h2>I am Example</h2>',\n          editorOption: {\n           // something config\n          }\n      }\n  },\n  // 如果需要手动控制数据同步，父组件需要显式地处理changed事件\n  methods: {\n    onEditorBlur(editor) {\n      console.log('editor blur!', editor)\n    },\n    onEditorFocus(editor) {\n      console.log('editor focus!', editor)\n    },\n    onEditorReady(editor) {\n      console.log('editor ready!', editor)\n    },\n    onEditorChange({ editor, html, text }) {\n      // console.log('editor change!', editor, html, text)\n      this.content = html\n    }\n  },\n  // 如果你需要得到当前的editor对象来做一些事情，你可以像下面这样定义一个方法属性来获取当前的editor对象，实际上这里的$refs对应的是当前组件内所有关联了ref属性的组件元素对象\n  computed: {\n    editor() {\n      return this.$refs.myTextEditor.quillEditor\n    }\n  },\n  mounted() {\n    // you can use current editor object to do something(editor methods)\n    console.log('this is my editor', this.editor)\n    // this.editor to do something...\n  }\n}\n<\/script>\n```\n\n\n\n这样就成功引入了一个富文本组件。有几点值得注意：\n\n- import 时需要注意组件暴露的数据结构；\n- 有一些组件需要额外引入样式。\n\n"}}]);