(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c1ecd"],{"47b6":function(n,e){n.exports="# i18n\n\n### Getting Started\n\nPro implements globalization through the vue plugin [vue-i18n](https://kazupon.github.io/vue-i18n/) and is enabled by default. convention Introduces the corresponding js in `src/lang/index.js` ，such as en-US.js and zh-CN.js,\n\n```js\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\nimport en_us from './locale/en-US'\n\nVue.use(VueI18n)\n\nconst i18n = new VueI18n({\n  locale: 'zh-CN', // lang\n  fallbackLocale: defaultLanguage,\n  messages:{\n    'en-US': en_us\n  }\n})\nexport default i18n\n......\n```\n\n### Formate Message\n\nIf we have the following configuration in `en-US.js` and `zh-CN.js` respectively:\n\n```js\n// zh-CN.js\nimport zhCN from 'ant-design-vue/es/locale-provider/zh_CN'\n\nexport default {\n  // append ant-design-vue locale files\n  antLocale: zhCN,\n  lang: '中文',\n}\n\n// en-US.js\nimport enUS from 'ant-design-vue/es/locale-provider/en_US'\n\nexport default {\n  antLocale: enUS,\n  lang: 'English',\n}\n```\n\nWe can use this in the component\n\n```js\n<template>\n    <div>\n    \t{{ $t('lang') }} \n    </div>\n</template>\n```\n\n### Set Locale\n\nin `src/locales/index.js`  exposes apis named  `loadLanguageAsync`  which make it easy to switch between regions. The code like this:\n\n```js\nimport { loadLanguageAsync } from '@/locales' \n...\nSetLang({ commit }, lang) {\n  return new Promise(resolve => {\n    commit('SET_LANG', lang) \n    loadLanguageAsync(lang)\n    resolve()\n  })\n}\n...\n```\n\n// App.vue\n```vue\n<template>\n  \x3c!-- :locale 绑定 ant design 本地化 --\x3e\n  <a-locale-provider :locale=\"locale\">\n    <div id=\"app\">\n      <router-view/>\n    </div>\n  </a-locale-provider>\n</template>\n\n<script>\nimport { AppDeviceEnquire } from '@/utils/mixin'\nimport i18n from '@/locales'\nimport i18nMixin from '@/store/i18n-mixin'\n\nexport default {\n  mixins: [AppDeviceEnquire, i18nMixin],\n  data () {\n    return {\n      locale: {}\n    }\n  },\n  created () {\n    this.$watch('currentLang', () => {\n      this.locale = i18n.getLocaleMessage(this.currentLang).antLocale\n    })\n  },\n  mounted () {\n  }\n}\n<\/script>\n<style>\n  #app {\n    height: 100%;\n  }\n</style>\n```\n\n> More advanced usage can be found in [vue-i18n](http://kazupon.github.io/vue-i18n/)\n"}}]);