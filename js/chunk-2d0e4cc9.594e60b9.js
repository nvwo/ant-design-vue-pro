(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e4cc9"],{9282:function(n,e){n.exports='# 新增业务组件\n\n对于一些可能被多处引用的功能模块，建议提炼成业务组件统一管理。这些组件一般有以下特征：\n\n- 只负责一块相对独立，稳定的功能；\n- 没有单独的路由配置；\n- 可能是纯静态的，也可能包含自己的 state，但不涉及 vuex 的数据流，仅受父组件（通常是一个页面）传递的参数控制。\n\n---\n\n下面以一个简单的静态组件为例进行介绍。假设你的应用中经常需要展现图片，这些图片宽度固定，有一个灰色的背景和一定的内边距，有文字介绍，就像下图这样：\n\n![](https://gw.alipayobjects.com/zos/rmsportal/vcRltFiKfHBHFrUcsTtW.png)\n\n你可以用一个组件来实现这一功能，它有默认的样式，同时可以接收父组件传递的参数进行展示。\n\n## 新建文件\n\n在 `src/components` 下新建一个以组件名命名的文件夹，注意首字母大写，命名尽量体现组件的功能，这里就叫 `ImageWrapper`。在此文件夹下新增 js 文件及样式文件（如果需要），命名为 `index.js` 和 `index.less`。\n\n> 在使用组件时，默认会在 `index.js` 中寻找 export 的对象，如果你的组件比较复杂，可以分为多个文件，最后在 `index.js` 中统一 export，就像这样：\n> ```js\n> // MainComponent.js\n> export default ({ ... }) => (...)\n> \n> // SubComponent1.js\n> export default ({ ... }) => (...)\n> \n> // SubComponent2.js\n> export default ({ ... }) => (...)\n> \n> // index.js\n> import MainComponent from \'./MainComponent\'\n> import SubComponent1 from \'./SubComponent1\'\n> import SubComponent2 from \'./SubComponent2\'\n> \n> MainComponent.SubComponent1 = SubComponent1\n> MainComponent.SubComponent2 = SubComponent2\n> export default MainComponent\n> ```\n\n你的代码大概是这个样子：\n```vue\n<template>\n\t<div class="image-wrapper">\n\t\t<img class="img" :src="src" :alt="desc" />\n        \x3c!-- 如果使用该组织的使用者没用 slot，则默认 div.desc 来输出传递的 desc 属性 --\x3e\n\t\t<slot name="desc">\n\t\t\t<div class="desc" v-if="desc">{{ desc }}</div>\n\t\t</slot>\n\t</div>\n</template>\n\n<script>\nexport default {\n    name: \'ImageWrapper\',\n    props: {\n        src: {\n            type: String,\n            required: true\n        },\n        desc: {\n            type: String,\n            default: null\n        }\n    },\n    data () {\n        return {\n        }\n    }\n}\n<\/script>\n\n<style lang="less" scoped>\n@import \'@/components/index.less\';\n\n.image-wrapper {\n  padding: 0 20px 8px;\n  background: #f2f4f5;\n  width: 400px;\n  margin: 0 auto;\n  text-align: center;\n  \n  .img {\n      vertical-align: middle;\n      max-width: calc(100% - 32px);\n      margin: 2.4em 1em;\n      box-shadow: 0 8px 20px rgba(143, 168, 191, 0.35);\n  }\n  \n  .desc {\n      font-size: 1em;\n      color: #000;\n  }\n}\n</style>\n```\n\n到这儿组件就建好了。\n\n\n\n## 使用\n\n在要使用这个组件的地方，按照组件定义的 API 传入参数，直接使用就好，不过别忘了先引入：\n\n```vue\n<template>\n\t\x3c!-- 普通使用方式 --\x3e\n\t<image-wrapper :src="imageSrc" :desc="context"></image-wrapper>\n\t\n\t\x3c!-- 使用 slot 的 desc 方式 --\x3e\n\t<image-wrapper :src="imageSrc">\n\t\t<span slot="desc">{{ context }}</span>\n\t</image-wrapper>\n</template>\n\n<script>\nimport ImageWrapper from \'@/components/ImageWrapper\';  // @ 表示相对于源文件根目录\n\nexport default {\n\t// 引入组件\n\tcomponents: {\n        ImageWrapper\n\t},\n    data () {\n        return {\n            context: \'示意图\',\n        \timageSrc: \'https://os.alipayobjects.com/rmsportal/mgesTPFxodmIwpi.png\'\n        }\n    }\n}\n<\/script>\n```\n'}}]);